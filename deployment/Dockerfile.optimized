# Multi-stage build for optimized BeaconAI
FROM python:3.9-slim AS base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc g++ wget gnupg gpg unzip curl \
    && rm -rf /var/lib/apt/lists/*

# Install Chrome (optimized)
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/googlechrome-linux-keyring.gpg \
    && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/googlechrome-linux-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list \
    && apt-get update && apt-get install -y google-chrome-stable \
    && rm -rf /var/lib/apt/lists/*

# Install ChromeDriver
RUN CHROMEDRIVER_VERSION="138.0.7204.183" && \
    curl -sS -o /tmp/chromedriver_linux64.zip https://storage.googleapis.com/chrome-for-testing-public/$CHROMEDRIVER_VERSION/linux64/chromedriver-linux64.zip && \
    unzip -qq /tmp/chromedriver_linux64.zip -d /opt/ && \
    chmod +x /opt/chromedriver-linux64/chromedriver && \
    ln -fs /opt/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver && \
    rm /tmp/chromedriver_linux64.zip

# Stage 2: Install Python dependencies
FROM base AS dependencies

# Copy requirements files
COPY requirements.txt .
COPY requirements1.txt .

# Install Python packages (using existing requirements for now)
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir -r requirements1.txt

# Pre-download the sentence transformer model to reduce startup time
RUN python -c "from sentence_transformers import SentenceTransformer; SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')"

# Stage 3: Application
FROM dependencies AS application

# Create directories
RUN mkdir -p /app/generated_reports /app/reporting/assets

# Copy application code
COPY . .

# Create optimized startup script
RUN echo '#!/bin/bash\n\
echo "🚀 Starting BeaconAI Full-stack Application..."\n\
echo "📊 Backend: FastAPI on port 8000"\n\
echo "🎨 Frontend: Streamlit on port 8080"\n\
\n\
# Start FastAPI backend\n\
uvicorn api.main:app --host 0.0.0.0 --port 8000 --workers 1 &\n\
BACKEND_PID=$!\n\
\n\
# Wait for backend to be ready\n\
echo "⏳ Waiting for backend to start..."\n\
sleep 8\n\
\n\
# Start Streamlit frontend\n\
echo "🎨 Starting Streamlit frontend..."\n\
streamlit run app.py --server.port 8080 --server.address 0.0.0.0 \\\n\
  --server.headless true --server.enableCORS false \\\n\
  --server.enableXsrfProtection false &\n\
FRONTEND_PID=$!\n\
\n\
# Wait for both processes\n\
wait $BACKEND_PID $FRONTEND_PID\n\
' > /app/start-optimized.sh && chmod +x /app/start-optimized.sh

# Expose ports
EXPOSE 8080 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=15s --retries=3 \
    CMD curl -f http://localhost:8080/_stcore/health && curl -f http://localhost:8000/health || exit 1

# Run optimized startup
CMD ["/app/start-optimized.sh"]